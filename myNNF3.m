function [Y,Xf,Af] = myNNF3(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 09-Jun-2017 19:30:30.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 23xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [13766.7;9100;5379.17;3116.67;1066.67;404.167;616.667;183.333;91.6667;154.167;108.333;116.667;62.5;83.3333;59.1667;53.3333;29.1667;17.5;16.6667;0.833333;0;0;0];
  x1_step1_gain = [1.59714685685491e-05;2.37247924080664e-05;3.96956691826443e-05;9.44696074740575e-05;0.000183191619349798;0.000259571605617804;0.000163431632829918;0.000287424998243115;0.000505263162149585;0.000345323959629557;0.000446096289437979;0.000511727122535362;0.000837696335078534;0.000577617879029314;0.000293577839441193;0.000341442787325855;0.00136908160568355;0.00170575692963753;0.00107286738238007;0.00145366092354624;0.00305732328289259;0.00480962309388625;0.00424027968884828];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [-0.19230311752733864;0.48651743105853751;-0.30969687278266489];
  IW1_1 = [0.045145414803938459 0.080400351088576724 -0.093230527192944571 0.051250854650629146 -0.040669934657519301 -0.082279255716689995 0.17071055668526619 0.0070558133278715782 0.034809597712230786 -0.10427637187836182 -0.02220000110533369 -0.06236161576748344 0.018946960309444469 -0.079491196320775601 -0.23649746574838598 -0.25834021069485352 -0.055668056414216571 -0.04833967757551761 0.1253224289563715 0.19478260831769054 -0.062068751905306037 0.11700753497910016 0.044734262214265998;0.077022901499011587 0.020621693797383496 -0.056065448249271677 0.058936528391513483 -0.040460402512202905 -0.057738907153024092 0.0922386042064504 0.033170626505818784 0.029288085714769482 -0.058621064893521715 -0.0050384334401282439 -0.024170907296264605 0.023560727004586335 0.0025855160503159822 -0.012296637867718103 -0.021543596494715832 -0.0035819075062486169 -0.028312642366569024 0.0804181257294517 0.024345738044823512 -0.13701700629224217 -0.032860987881976805 -0.11782812646505202;-0.27204588599738239 -0.1112774988693405 0.22611095773234655 -0.22058528216971965 0.15850599359169065 0.22957619386315814 -0.39758201684454414 -0.11901104120891678 -0.11125542673932562 0.24908022825875195 0.022435605939701911 0.10469421086125179 -0.096567525773403523 0.018556962884359492 0.091665228761785511 0.12874841112952978 0.026518705111652045 0.083194943379429329 -0.44282651411068491 -0.34994213436198318 0.31886974743954061 -0.12152243597453555 0.13700047239949026];
  
  % Layer 2
  b2 = [1.6164219835810472;0.39329389948016152;-1.4233891185764962];
  LW2_1 = [-0.3915456581596361 -4.4030892367857293 -0.8734382402902654;-1.6101689028754311 -2.1199451129703788 -0.97785885681778206;-2.4077715359798351 1.3841034088990893 -2.5853335328483];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [0.00095128018530938;0.0104357080291346;0.123013864277573];
  y1_step1_xoffset = [23.7;6.68333;2.59167];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
